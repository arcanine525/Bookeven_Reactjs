{"version":3,"sources":["components/Spinners/Spinner.js","const/config.js","reducers/books.js","reducers/cart.js","reducers/ui.js","reducers/account.js","reducers/order.js","reducers/index.js","utils/axiosService.js","apis/book.js","sagas/book.js","apis/cart.js","sagas/cart.js","apis/account.js","sagas/account.js","apis/order.js","sagas/order.js","sagas/index.js","redux/configureStore.js","components/Buttons/NewBookBtn/const.js","components/Buttons/NewBookBtn/ModalNewBook.js","components/Buttons/NewBookBtn/NewBookBtn.js","containers/BookContainer/NewBookContainer.js","index.js","const/actionType.js","const/message.js","actions/book.js","utils/Utils.js","actions/cart.js","actions/account.js","actions/order.js"],"names":["list","Spinner","showLoading","this","props","ui","lazyShow","showSpin","xhtml","className","Math","floor","random","Component","propType","PropTypes","object","connect","state","API_URL","STATUS_CODE","SUCCESS","CREATED","UPDATED","roles","manager","couple_btn","l_icon","l_txt","r_icon","r_txt","account_left","path","icon","title","over_img_card","customer","intialState","listBooks","detailBook","fieldsBook","filtedBook","keyword","comments","books","action","type","types","data","payload","index","findIndex","item","id","newList","slice","initialState","cart","push","filter","toggleModal","numTab","isOpen","message","reducer","openModal","closeModal","address","info","account","orders","rootReducer","history","combineReducers","router","connectRouter","instance","axios","create","interceptors","response","use","handleSuccess","handleError","error","Promise","reject","endpoint","get","request","method","url","responseType","getListBooks","axiosService","updateListBooks","put","getListFieldsbook","getListComments","ISBN","addComment","post","watchFetchListBookAction","watchFetchFieldsbookAction","watchGetBookDetailAction","watchGetListComments","filterBookBySingleTypeAction","filterBookByMultiTypeAction","updateBookAction","addCommentAction","bookSaga","take","call","res","status","fetchListBookSuccess","fetchListBookFailed","fetchListFieldsbookSuccess","fetchListFieldsbookFailed","select","filterBook","getDetailBookSuccess","getListCommentsSuccess","getListCommentsFailed","filterBooks","book","trim","toLowerCase","includes","topic","filterBooksSingleSuccess","price","min","max","realPrice","rate","filterBooksMultiSuccess","updateListBookSuccess","toastSuccess","msg","delay","window","location","reload","updateListBookFailed","addCommentSuccess","addCommentFailed","fork","takeEvery","takeLatest","getCart","addToCart","updateCart","removeBook","delete","watchGetCartAction","watchAddToCartAction","watchUpdateCartAction","watchRemoveItemAction","cartSaga","fetchCartSuccess","fetchCartFailed","product","quantity","checkExist","length","updateCartSuccess","updateCartFailed","addToCartSuccess","addToCartFailed","removeCartSuccess","removeCartFailed","getListAddress","createNewAddress","updateAddress","deleteAddress","watchGetAddressAction","watchCreateAddressAction","watchUpdateAddressAction","watchDeleteAddressAction","accountSaga","getListAddressSuccess","getListAddressFailed","createNewAddressSuccess","createNewAddressFailed","updateAddressSuccess","updateAddressFailed","deleteAddressSuccess","deleteAddressFailed","fetchAllListOrders","fetchListOrdersById","updateOrder","createOrder","watchfetchAllListOrders","watchfetchListOrdersById","watchFilterOrder","watchCreateOrder","watchUpdateOrder","orderSaga","fetchAllListOrdersSuccess","fetchAllListOrdersFailed","fetchListOrdersByIdSuccess","fetchListOrdersByIdFailed","time","Date","body","idAddress","createAt","moment","unix","endTime","createOrderSuccess","createOrderFailed","updateOrderSuccess","updateOrderFailed","rootSaga","all","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","createBrowserHistory","configureStore","middleWares","thunk","routerMiddleware","enhancers","applyMiddleware","store","createStore","run","LIMIT_FORMAT","LIMIT_SIZE","UPLOAD_SUCCESS","ModalNewBook","beforeUpload","file","isJpgOrPng","$utils","toastError","cont","isLt2M","size","changeImg","getBase64","originFileObj","imageUrl","setState","loading","changeToSave","handleSelectTopic","changeHandler","event","target","name","value","normFile","e","Array","isArray","fileList","handleSubmit","updateListBook","fetchListBook","preventDefault","form","validateFieldsAndScroll","err","values","author","percentDiscount","inventory","pages","publishDate","weight","src","previewVisible","modal","getFieldDecorator","uploadButton","cascading","tag","toggle","titleClass","onSubmit","Fragment","hover","onClick","alt","waves","overlay","Item","label","valuePropName","getValueFromEvent","rules","required","accept","listType","showUploadList","onPreview","handlePreview","onChange","style","width","TextArea","autoSize","minRows","maxRows","placeholder","map","Option","key","step","formatter","formatVND","parser","format","outline","shape","htmlType","mainSrc","onCloseRequest","Wrapper","Form","NBBtn","NewBookContainer","dispatch","bookActions","bindActionCreators","role","localStorage","getItem","Routes","lazy","resolve","setTimeout","global","utils","prototype","ReactDOM","render","basename","visibilityHeight","fallback","document","getElementById","OPEN_MODAL","CLOSE_MODAL","FETCH_LIST_BOOK","FETCH_LIST_BOOK_SUCCESS","FETCH_LIST_BOOK_FAILED","GET_DETAIL_BOOK","GET_DETAIL_BOOK_SUCCESS","GET_DETAIL_BOOK_FAILED","UPDATE_BOOK","UPDATE_BOOK_SUCCESS","UPDATE_BOOK_FAILED","FETCH_LIST_FIELDSBOOK","FETCH_LIST_FIELDSBOOK_SUCCESS","FETCH_LIST_FIELDSBOOK_FAILED","FETCH_CART","FETCH_CART_SUCCESS","FETCH_CART_FAILED","ADD_TO_CART","ADD_TO_CART_SUCCESS","ADD_TO_CART_FAILED","REMOVE_ITEM_FROM_CART","REMOVE_ITEM_FROM_CART_SUCCESS","REMOVE_ITEM_FROM_CART_FAILED","UPDATE_CART","UPDATE_CART_SUCCESS","UPDATE_CART_FAILED","CHANGE_MESSAGE","SHOW_LOADING","HIDE_LOADING","FILTER_BOOKS_SINGLE","FITLER_BOOKS_SINGLE_SUCCESS","FILTER_BOOKS_MULTI","FITLER_BOOKS_MULTI_SUCCESS","GET_KEYWORD","GET_LIST_ADDRESS","GET_LIST_ADDRESS_SUCCESS","GET_LIST_ADDRESS_FAILED","CREATE_NEW_ADDRESS","CREATE_NEW_ADDRESS_SUCCESS","CREATE_NEW_ADDRESS_FAILED","UPDATE_ADDRESS","UPDATE_ADDRESS_SUCCESS","UPDATE_ADDRESS_FAILED","DELETE_ADDRESS","DELETE_ADDRESS_SUCCESS","DELETE_ADDRESS_FAILED","FETCH_ALL_LIST_ORDER","FETCH_ALL_LIST_ORDER_SUCCESS","FETCH_ALL_LIST_ORDER_FAILED","FETCH_LIST_ORDER_BY_ID","FETCH_LIST_ORDER_BY_ID_SUCCESS","FETCH_LIST_ORDER_BY_ID_FAILED","FILTER_ORDER","FILTER_ORDER_SUCCESS","UPDATE_ORDER","UPDATE_ORDER_SUCCESS","UPDATE_ORDER_FAILED","CREATE_ORDER","CREATE_ORDER_SUCCESS","CREATE_ORDER_FAILED","GET_LIST_COMMENTS","GET_LIST_COMMENTS_SUCCESS","GET_LIST_COMMENTS_FAILED","ADD_COMMENT","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILED","TITLE_SUCCESS","TITLE_FAIL","MSG_SURE_TO_DELETE_ADDRESS","MSG_SURE_TO_ORDER","MSG_ADD_TO_CART_SUCCESS","MSG_UPDATE_CART_SUCESS","MSG_DELETE_BOOK_IN_CART_SUCCESS","MSG_CREATED_ADDRESS_SUCCESS","MSG_UPDATE_ADDRESS_SUCCESS","MSG_DELETE_ADDRESS_SUCCESS","MSG_CREATE_ORDER_SUCCESS","MSG_UPDATE_ORDER_SUCCESS","MSG_UPDATE_BOOK_SUCCESS","MSG_ADD_COMMENT_SUCCESS","MSG_CART_EMPTY","MSG_EMPTY_ADDRESS","MSG_ADD_TO_CART_FAIL","getDetailBook","getDetailBookFailed","filterBooksSingle","filterBooksMulti","getKeyword","fetchListFieldsbook","require","numeral","notification","success","description","addToCartFail","essage","idGenerator","toString","substr","toast","toastErrorApi","convertVietnamese","str","replace","calculateTotalCart","result","parseInt","filterAddress","provinceId","districtId","wardId","wardName","ward","wardid","districtName","district","districtid","provinceName","province","provinceid","img","callback","reader","FileReader","addEventListener","readAsDataURL","calDiscountPrice","percent","calTotalPrice","formatTimeToDate","timestamp","fetchCart","removeCart"],"mappings":"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","file":"static/js/main.4b42bc97.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport './spinner.scss'\r\n/* types of loading spinner\r\n    point\r\n    radius\r\n    corner\r\n    sound\r\n*/\r\nconst list = ['point', 'radius', 'corner', 'sound', 'default']\r\nclass Spinner extends Component {\r\n    render() {\r\n        const { showLoading } = this.props.ui\r\n        var { lazyShow } = false\r\n        if(this.props.showSpin)\r\n            lazyShow = true\r\n        let xhtml = null\r\n        if (showLoading || lazyShow)\r\n            xhtml = (\r\n                <div className=\"con-fl-loading\" >\r\n                    {/* <h4 className=\"title-loading\">Đang xử lý...</h4> */}\r\n                    <div className={`fl-loading ${list[Math.floor(Math.random() * 4)]}`}>\r\n                        <div className=\"effect-1 effects\"></div>\r\n                        <div className=\"effect-2 effects\"></div>\r\n                        <div className=\"effect-3 effects\"></div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        return xhtml\r\n    }\r\n}\r\n\r\nSpinner.propType = {\r\n    ui: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n       ui : state.ui\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Spinner);\r\n\r\n","export const API_URL = 'http://localhost:3000'\r\n\r\nexport const STATUS_CODE = {\r\n    SUCCESS: 200,\r\n    CREATED: 201,\r\n    UPDATED: 202\r\n}\r\n\r\nexport const roles = {\r\n    manager: {\r\n        couple_btn: {\r\n            l_icon: 'info-circle',\r\n            l_txt: 'Chi tiết',\r\n            r_icon: 'edit',\r\n            r_txt: 'Sửa'\r\n        },\r\n        account_left: [\r\n            {\r\n                path: '/tinh-hinh-don-hang',\r\n                icon: 'truck-loading',\r\n                title: 'Tình hình đơn hàng'\r\n            },\r\n        ],\r\n        over_img_card: [\r\n            {\r\n                icon: 'truck-loading',\r\n                title: 'Tình hình đơn hàng'\r\n            },\r\n\r\n        ]\r\n    },\r\n    customer: {\r\n        couple_btn: {\r\n            l_icon: 'info-circle',\r\n            l_txt: 'Chi tiết',\r\n            r_icon: 'shopping-cart',\r\n            r_txt: 'Mua'\r\n        },\r\n        account_left: [\r\n            {\r\n                path: '/gio-hang',\r\n                icon: 'shopping-cart',\r\n                title: 'Giỏ hàng'\r\n            },\r\n            {\r\n                path: '/lich-su-mua-hang',\r\n                icon: 'history',\r\n                title: 'Lịch sử mua hàng'\r\n            },\r\n        ],\r\n        over_img_card: [\r\n            {\r\n                icon: 'history',\r\n                title: 'Lịch sử mua hàng'\r\n            }\r\n        ]\r\n    }\r\n}","import * as types from '../const/actionType'\r\n\r\nvar intialState = {\r\n    listBooks: [],\r\n    detailBook: {},\r\n    fieldsBook: [],\r\n    filtedBook: {\r\n        list: [],\r\n        keyword: ''\r\n    },\r\n    comments: []\r\n}\r\n\r\nvar books = (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case types.GET_DETAIL_BOOK_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                detailBook: data,\r\n            }\r\n        }\r\n        case types.FETCH_LIST_BOOK_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                listBooks: data\r\n            }\r\n        }\r\n        case types.FETCH_LIST_BOOK_FAILED: {\r\n            return {\r\n                ...state,\r\n                listBooks: [],\r\n            }\r\n        }\r\n        case types.FITLER_BOOKS_SINGLE_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                filtedBook: {\r\n                    ...state.filtedBook,\r\n                    list: data\r\n                }\r\n            }\r\n        }\r\n        case types.FITLER_BOOKS_MULTI_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                filtedBook: {\r\n                    list: data,\r\n                    keyword: ''\r\n                }\r\n            }\r\n        }\r\n        case types.GET_KEYWORD: {\r\n            const { keyword } = action.payload\r\n            return {\r\n                ...state,\r\n                filtedBook: {\r\n                    ...state.filtedBook,\r\n                    keyword: keyword\r\n                }\r\n            }\r\n        }\r\n        case types.FETCH_LIST_FIELDSBOOK_SUCCESS:\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                fieldsBook: data\r\n            }\r\n        case types.FETCH_LIST_FIELDSBOOK_FAILED:\r\n            return { ...state }\r\n        case types.UPDATE_BOOK_SUCCESS:\r\n            {\r\n                const { data } = action.payload\r\n                const index = state.listBooks.findIndex(item => item.id === data.id)\r\n                const newList = [...state.listBooks.slice(0, index), data, ...state.listBooks.slice(index + 1)];\r\n                return {\r\n                    ...state,\r\n                    listBooks: newList\r\n                }\r\n            }\r\n        case types.GET_LIST_COMMENTS_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                comments: data\r\n            }\r\n        }\r\n        case types.ADD_COMMENT_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                comments: [\r\n                    ...state.comments,\r\n                    data\r\n                ]\r\n            }\r\n        }\r\n        default: return { ...state }\r\n    }\r\n}\r\n\r\nexport default books","import * as types from '../const/actionType'\r\n\r\nvar initialState = []\r\nvar cart = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.FETCH_CART_SUCCESS: {\r\n            const { data } = action.payload\r\n            state = data\r\n            return [...state]\r\n        }\r\n        case types.FETCH_CART_FAILED:\r\n            return state\r\n        case types.ADD_TO_CART_SUCCESS: {\r\n            const { data } = action.payload\r\n            state.push(data)\r\n            return [...state]\r\n        }\r\n        case types.ADD_TO_CART_FAILED:\r\n            return [...state]\r\n        case types.UPDATE_CART_SUCCESS: {\r\n            const { data } = action.payload\r\n            const index = state.findIndex(item => item.id === data.id)\r\n            const newList = [...state.slice(0, index), data, ...state.slice(index + 1)];\r\n            return [...newList]\r\n        }\r\n        case types.UPDATE_CART_FAILED:\r\n            return [...state]\r\n        case types.REMOVE_ITEM_FROM_CART_SUCCESS: {\r\n            const { data } = action.payload\r\n            const newList = state.filter(item => item.id !== data.id)\r\n            return [...newList]\r\n        }\r\n        case types.REMOVE_ITEM_FROM_CART_FAILED:\r\n            return [...state]\r\n        default: return [...state]\r\n    }\r\n}\r\n\r\nexport default cart","import * as types from '../const/actionType'\r\n\r\nconst initialState = {\r\n    toggleModal: {\r\n        numTab: 0,\r\n        isOpen: false,\r\n    },\r\n    showLoading: false,\r\n    message: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.OPEN_MODAL:\r\n            var openModal = {\r\n                numTab: action.numTab,\r\n                isOpen: true\r\n            }\r\n            return {\r\n                ...state,\r\n                toggleModal: openModal\r\n            }\r\n        case types.CLOSE_MODAL:\r\n            var closeModal = {\r\n                numTab: 0,\r\n                isOpen: false\r\n            }\r\n            return {\r\n                ...state,\r\n                toggleModal: closeModal\r\n            }\r\n        case types.SHOW_LOADING:\r\n            return {\r\n                ...state,\r\n                showLoading: true\r\n            }\r\n        case types.HIDE_LOADING:\r\n            return {\r\n                ...state,\r\n                showLoading: false\r\n            }\r\n\r\n        case types.CHANGE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.message\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer","import * as types from '../const/actionType'\r\n\r\nvar initialState = {\r\n    address: [],\r\n    info: []\r\n}\r\nvar account = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.GET_LIST_ADDRESS_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                address: data\r\n            }\r\n        }\r\n        case types.CREATE_NEW_ADDRESS_SUCCESS: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                address: [\r\n                    ...state.address,\r\n                    data\r\n                ]\r\n            }\r\n        }\r\n        case types.UPDATE_ADDRESS_SUCCESS: {\r\n            const { data } = action.payload\r\n            const index = state.address.findIndex(item => item.id === data.id)\r\n            const newList = [...state.address.slice(0, index), data, ...state.address.slice(index + 1)];\r\n            return {\r\n                ...state,\r\n                address: [...newList]\r\n            }\r\n        }\r\n        case types.DELETE_ADDRESS_SUCCESS: {\r\n            const { id } = action.payload\r\n            const newList = state.address.filter(item => item.id !== id)\r\n            return {\r\n                ...state,\r\n                address: [...newList]\r\n            }\r\n        }\r\n        default: return { ...state }\r\n    }\r\n}\r\n\r\nexport default account","import * as types from '../const/actionType'\r\n\r\nvar initialState = []\r\nvar orders = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.FETCH_ALL_LIST_ORDER_SUCCESS: {\r\n            const { data } = action.payload\r\n            return [...data]\r\n        }\r\n        case types.FETCH_LIST_ORDER_BY_ID_SUCCESS: {\r\n            const { data } = action.payload\r\n            return [...data]\r\n        }\r\n        case types.FILTER_ORDER_SUCCESS: {\r\n            return [...state]\r\n        }\r\n        case types.CREATE_ORDER_SUCCESS: {\r\n            const { data } = action.payload\r\n            state.push(data)\r\n            return [...state]\r\n        }\r\n        case types.UPDATE_ORDER_SUCCESS: {\r\n            const { data } = action.payload\r\n            const index = state.findIndex(item => item.id === data.id)\r\n            const newList = [...state.slice(0, index), data, ...state.slice(index + 1)];\r\n            return [...newList]\r\n        }\r\n        default: return [...state]\r\n    }\r\n}\r\n\r\nexport default orders","import { combineReducers } from 'redux'\r\nimport books from './books'\r\nimport cart from './cart'\r\nimport ui from './ui'\r\nimport account from './account'\r\nimport orders from './order'\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nconst rootReducer = history =>\r\n    combineReducers({\r\n        books,\r\n        cart,\r\n        ui,\r\n        account,\r\n        orders,\r\n        router: connectRouter(history)\r\n    })\r\n\r\nexport default rootReducer","import axios from 'axios'\r\n\r\nclass AxiosService {\r\n    constructor() {\r\n        const instance = axios.create()\r\n        instance.interceptors.response.use(\r\n            this.handleSuccess,\r\n            this.handleError\r\n        )\r\n        this.instance = instance\r\n    }\r\n\r\n    handleSuccess(response) {\r\n        return response\r\n    }\r\n\r\n    handleError(error) {\r\n        return Promise.reject(error)\r\n    }\r\n\r\n    get(endpoint) {\r\n        return this.instance.get(endpoint)\r\n    }\r\n\r\n    post(endpoint, payload) {\r\n        return this.instance.request({\r\n            method: 'POST',\r\n            url: endpoint,\r\n            responseType: 'json',\r\n            data: payload\r\n        });\r\n    }\r\n    put(endpoint, payload) {\r\n        return this.instance.request({\r\n            method: 'PUT',\r\n            url: endpoint,\r\n            responseType: 'json',\r\n            data: payload\r\n        });\r\n    }\r\n\r\n    delete(endpoint, payload) {\r\n        return this.instance.request({\r\n            method: 'DELETE',\r\n            url: endpoint,\r\n            responseType: 'json',\r\n            data: payload\r\n        });\r\n    }\r\n}\r\n\r\nexport default new AxiosService()","import axiosService from '../utils/axiosService'\r\nimport { API_URL } from '../const/config'\r\n\r\n// http://localhost:3000/products\r\nconst url_books = 'books'\r\n\r\nexport const getListBooks = () => {\r\n    return axiosService.get(`${API_URL}/${url_books}`)\r\n}\r\n\r\nexport const updateListBooks = data => {\r\n    return axiosService.put(`${API_URL}/${url_books}/${data.id}`, data)\r\n}\r\n\r\n\r\n// http://localhost:3000/fieldsBook\r\nconst url_field = 'fieldsBook'\r\n\r\nexport const getListFieldsbook = () => {\r\n    return axiosService.get(`${API_URL}/${url_field}`)\r\n}\r\n\r\n// http://localhost:3000/comment\r\nconst url_cmt = 'comment'\r\n\r\nexport const getListComments = ISBN => {\r\n    return axiosService.get(`${API_URL}/${url_cmt}?ISBN=${ISBN}`)\r\n}\r\n\r\nexport const addComment = data => {\r\n    return axiosService.post(`${API_URL}/${url_cmt}`, data)\r\n}","import {\r\n    call,\r\n    fork,\r\n    put,\r\n    take,\r\n    delay,\r\n    takeLatest,\r\n    select,\r\n    takeEvery\r\n} from 'redux-saga/effects';\r\nimport * as types from '../const/actionType'\r\nimport {\r\n    fetchListBookSuccess, fetchListBookFailed,\r\n    filterBooksSingleSuccess, filterBooksMultiSuccess,\r\n    fetchListFieldsbookSuccess, fetchListFieldsbookFailed,\r\n    getDetailBookSuccess, getDetailBookFailed,\r\n    updateListBookSuccess, updateListBookFailed,\r\n    getListCommentsSuccess, getListCommentsFailed,\r\n    addCommentSuccess, addCommentFailed\r\n} from '../actions/book'\r\nimport { getListBooks, getListFieldsbook, updateListBooks, getListComments, addComment } from '../apis/book'\r\n\r\nimport { STATUS_CODE } from '../const/config'\r\nimport { toastSuccess } from '../utils/Utils'\r\nimport * as msg from '../const/message'\r\n\r\nfunction* watchFetchListBookAction() {\r\n    while (true) {\r\n        yield take(types.FETCH_LIST_BOOK)\r\n        const res = yield call(getListBooks)\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(fetchListBookSuccess(data))\r\n\r\n        } else {\r\n            yield put(fetchListBookFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchFetchFieldsbookAction() {\r\n    while (true) {\r\n        yield take(types.FETCH_LIST_FIELDSBOOK)\r\n        const res = yield call(getListFieldsbook)\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(fetchListFieldsbookSuccess(data))\r\n        } else {\r\n            yield put(fetchListFieldsbookFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchGetBookDetailAction({payload}) {\r\n    const { data } = payload\r\n    const list = yield select(state => state.books.listBooks)\r\n    const filterBook = list.filter(item => item.id === data)\r\n    yield put(getDetailBookSuccess(filterBook[0]))\r\n}\r\n\r\n\r\nfunction* watchGetListComments({payload}) {\r\n    const { ISBN } = payload\r\n    const res = yield call(getListComments, ISBN)\r\n    const { status, data } = res\r\n    if(status === STATUS_CODE.SUCCESS)\r\n        yield put(getListCommentsSuccess(data))\r\n    else yield put(getListCommentsFailed(data))\r\n}\r\n\r\nfunction* filterBookBySingleTypeAction({ payload }) {\r\n    const { data } = payload\r\n    const list = yield select(state => state.books.listBooks)\r\n    var filterBooks = null\r\n    if (typeof data === 'string') //filter by title\r\n        filterBooks = list.filter(book =>\r\n            book.title\r\n                .trim()\r\n                .toLowerCase()\r\n                .includes(data.trim().toLowerCase()))\r\n    else  //filter by topic\r\n        filterBooks = list.filter(book => book.topic === data)\r\n    yield put(filterBooksSingleSuccess(filterBooks))\r\n}\r\n\r\nfunction* filterBookByMultiTypeAction({ payload }) {\r\n    const { data } = payload\r\n    const { min, max } = data.price\r\n    const list = yield select(state => state.books.listBooks)\r\n    var filterBooks = list.filter(item =>\r\n        item.realPrice >= min\r\n        && item.realPrice <= max\r\n        && item.rate === data.rate\r\n        && (data.topic !== '' ? item.topic === data.topic : item.topic > 0)\r\n    )\r\n    yield put(filterBooksMultiSuccess(filterBooks))\r\n}\r\n\r\nfunction* updateBookAction({ payload }) {\r\n    const res = yield call(updateListBooks, payload.data)\r\n    const { status, data } = res\r\n    if(status === STATUS_CODE.SUCCESS) {\r\n        yield put(updateListBookSuccess(data))\r\n        toastSuccess(msg.MSG_UPDATE_BOOK_SUCCESS)\r\n        yield delay(1000)\r\n        window.location.reload()\r\n    }\r\n    else yield put(updateListBookFailed(data))\r\n\r\n}\r\n\r\nfunction* addCommentAction({ payload }) {\r\n    const res = yield call(addComment, payload.data)\r\n    const { status, data } = res\r\n    if(status === STATUS_CODE.CREATED) {\r\n        yield put(addCommentSuccess(data))\r\n        toastSuccess(msg.MSG_ADD_COMMENT_SUCCESS)\r\n    }\r\n    else yield put(addCommentFailed(data))\r\n\r\n}\r\n\r\n\r\nfunction* bookSaga() {\r\n    yield fork(watchFetchListBookAction)\r\n    yield fork(watchFetchFieldsbookAction)\r\n    yield takeEvery(types.GET_DETAIL_BOOK, watchGetBookDetailAction)\r\n    yield takeLatest(types.FILTER_BOOKS_SINGLE, filterBookBySingleTypeAction)\r\n    yield takeLatest(types.FILTER_BOOKS_MULTI, filterBookByMultiTypeAction)\r\n    yield takeLatest(types.GET_LIST_COMMENTS, watchGetListComments)\r\n    yield takeEvery(types.ADD_COMMENT, addCommentAction)\r\n    yield takeLatest(types.UPDATE_BOOK, updateBookAction)\r\n}\r\n\r\nexport default bookSaga","import axiosService from '../utils/axiosService'\r\nimport { API_URL } from '../const/config'\r\n\r\n// http://localhost:3000/cart\r\nconst url = 'cart'\r\n\r\nexport const getCart = () => {\r\n    return axiosService.get(`${API_URL}/${url}`)\r\n}\r\n\r\nexport const addToCart = data => {\r\n    return axiosService.post(`${API_URL}/${url}`, data)\r\n}\r\n\r\nexport const updateCart = data => {\r\n    return axiosService.put(`${API_URL}/${url}/${data.id}`, data)\r\n}\r\n\r\nexport const removeBook = id => {\r\n    return axiosService.delete(`${API_URL}/${url}/${id}`)\r\n}","import {\r\n    call,\r\n    fork,\r\n    put,\r\n    take,\r\n    takeLatest,\r\n    takeEvery,\r\n    select\r\n} from 'redux-saga/effects';\r\nimport * as types from '../const/actionType'\r\nimport {\r\n    fetchCartSuccess,\r\n    fetchCartFailed,\r\n    addToCartSuccess,\r\n    addToCartFailed,\r\n    removeCartSuccess,\r\n    removeCartFailed,\r\n    updateCartSuccess,\r\n    updateCartFailed\r\n} from '../actions/cart'\r\nimport { getCart, addToCart, updateCart, removeBook } from '../apis/cart'\r\n\r\nimport { STATUS_CODE } from '../const/config'\r\n\r\nfunction* watchGetCartAction() {\r\n    while (true) {\r\n        yield take(types.FETCH_CART)\r\n        const res = yield call(getCart)\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(fetchCartSuccess(data))\r\n        } else {\r\n            yield put(fetchCartFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchAddToCartAction({ payload }) {\r\n    const { product, quantity } = payload\r\n    var cart = yield select(state => state.cart) //get cart from store\r\n    var checkExist = []\r\n    if (cart.length > 0)\r\n        checkExist = cart.filter(book => book.id === product.id) // check if product exists in cart?\r\n    if (checkExist.length > 0) {\r\n        checkExist[0].quantity += quantity\r\n        const res = yield call(updateCart, checkExist[0])\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(updateCartSuccess(data))\r\n        } else {\r\n            yield put(updateCartFailed(data))\r\n        }\r\n    } else {\r\n        product.quantity = quantity\r\n        const res = yield call(addToCart, product)\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.CREATED) {\r\n            yield put(addToCartSuccess(data))\r\n        } else {\r\n            yield put(addToCartFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchUpdateCartAction({ payload }) {\r\n    const { product, quantity } = payload\r\n    const cart = yield select(state => state.cart) //get cart from store\r\n    const filterBook = cart.filter(book => book.id === product.id) //filter product needs to update\r\n    if (filterBook.length > 0) {\r\n        filterBook[0].quantity = quantity\r\n        const res = yield call(updateCart, filterBook[0])\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(updateCartSuccess(data))\r\n        } else {\r\n            yield put(updateCartFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchRemoveItemAction({ payload }) {\r\n    const { product } = payload\r\n    const res = yield call(removeBook, product.id)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n        yield put(removeCartSuccess(product))\r\n    } else {\r\n        yield put(removeCartFailed(data))\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* cartSaga() {\r\n    yield fork(watchGetCartAction)\r\n    yield takeEvery(types.ADD_TO_CART, watchAddToCartAction)\r\n    yield takeLatest(types.UPDATE_CART, watchUpdateCartAction)\r\n    yield takeLatest(types.REMOVE_ITEM_FROM_CART, watchRemoveItemAction)\r\n}\r\n\r\nexport default cartSaga","import axiosService from '../utils/axiosService'\r\nimport { API_URL } from '../const/config'\r\n\r\n// http://localhost:3000/address\r\nconst url_address = 'address'\r\n\r\nexport const getListAddress = () => {\r\n    return axiosService.get(`${API_URL}/${url_address}`)\r\n}\r\n\r\nexport const createNewAddress = data => {\r\n    return axiosService.post(`${API_URL}/${url_address}`, data)\r\n}\r\n\r\nexport const updateAddress = data => {\r\n    return axiosService.put(`${API_URL}/${url_address}/${data.id}`, data)\r\n}\r\n\r\nexport const deleteAddress = id => {\r\n    return axiosService.delete(`${API_URL}/${url_address}/${id}`)\r\n}","import {\r\n    call,\r\n    fork,\r\n    put,\r\n    take,\r\n    takeLatest,\r\n    takeEvery,\r\n    select\r\n} from 'redux-saga/effects';\r\nimport * as types from '../const/actionType'\r\nimport {\r\n    getListAddressSuccess, getListAddressFailed,\r\n    createNewAddressSuccess, createNewAddressFailed,\r\n    updateAddressSuccess, updateAddressFailed,\r\n    deleteAddressSuccess, deleteAddressFailed,\r\n} from '../actions/account'\r\nimport { getListAddress, createNewAddress, updateAddress, deleteAddress } from '../apis/account'\r\nimport { toastSuccess } from '../utils/Utils'\r\nimport * as msg from '../const/message'\r\nimport { STATUS_CODE } from '../const/config'\r\n\r\nfunction* watchGetAddressAction() {\r\n    while (true) {\r\n        yield take(types.GET_LIST_ADDRESS)\r\n        const res = yield call(getListAddress)\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(getListAddressSuccess(data))\r\n        } else {\r\n            yield put(getListAddressFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchCreateAddressAction({ payload }) {\r\n    const res = yield call(createNewAddress, payload.data)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.CREATED) {\r\n        yield put(createNewAddressSuccess(data))\r\n        toastSuccess(msg.MSG_CREATED_ADDRESS_SUCCESS)\r\n    }\r\n    else yield put(createNewAddressFailed(data))\r\n}\r\n\r\nfunction* watchUpdateAddressAction({ payload }) {\r\n    const address = payload.data\r\n    const res = yield call(updateAddress, address)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n        yield put(updateAddressSuccess(data))\r\n        toastSuccess(msg.MSG_UPDATE_ADDRESS_SUCCESS)\r\n    }\r\n    else yield put(updateAddressFailed(data))\r\n\r\n\r\n}\r\n\r\nfunction* watchDeleteAddressAction({ payload }) {\r\n    const { id } = payload\r\n    const res = yield call(deleteAddress, id)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n        yield put(deleteAddressSuccess(id))\r\n        toastSuccess(msg.MSG_DELETE_ADDRESS_SUCCESS)\r\n    } else {\r\n        yield put(deleteAddressFailed(data))\r\n    }\r\n}\r\n\r\nfunction* accountSaga() {\r\n    yield fork(watchGetAddressAction)\r\n    yield takeEvery(types.CREATE_NEW_ADDRESS, watchCreateAddressAction)\r\n    yield takeLatest(types.UPDATE_ADDRESS, watchUpdateAddressAction)\r\n    yield takeLatest(types.DELETE_ADDRESS, watchDeleteAddressAction)\r\n}\r\n\r\nexport default accountSaga","import axiosService from '../utils/axiosService'\r\nimport { API_URL } from '../const/config'\r\n\r\n// http://localhost:3000/order\r\nconst url_order = 'order'\r\n\r\nexport const fetchAllListOrders = () => {\r\n    return axiosService.get(`${API_URL}/${url_order}`)\r\n} \r\n\r\nexport const fetchListOrdersById = id => {\r\n    return axiosService.get(`${API_URL}/${url_order}?customerId=${id}`)\r\n} \r\n\r\nexport const filterOrder = (code, name, phone, createAt, endTime, status) => {\r\n    return axiosService.get(`${API_URL}/${url_order}?code=${code}&name=${name}&phone=${phone}&createAt=${createAt}&endTime=${endTime}&status=${status}`)\r\n} \r\n\r\nexport const updateOrder = data => {\r\n    return axiosService.put(`${API_URL}/${url_order}/${data.id}`, data)\r\n}\r\n\r\nexport const createOrder = data => {\r\n    return axiosService.post(`${API_URL}/${url_order}`, data)\r\n}","import {\r\n    call,\r\n    fork,\r\n    put,\r\n    take,\r\n    takeLatest,\r\n    takeEvery,\r\n    select,\r\n    delay\r\n} from 'redux-saga/effects';\r\nimport * as types from '../const/actionType'\r\nimport {\r\n    fetchAllListOrdersSuccess, fetchAllListOrdersFailed,\r\n    fetchListOrdersByIdSuccess, fetchListOrdersByIdFailed,\r\n    filterOrderSuccess, filterOrderFailed,\r\n    updateOrderSuccess, updateOrderFailed,\r\n    createOrderSuccess, createOrderFailed\r\n} from '../actions/order'\r\nimport { fetchAllListOrders, fetchListOrdersById, createOrder, filterOrder, updateOrder } from '../apis/order'\r\nimport { toastSuccess } from '../utils/Utils'\r\nimport * as msg from '../const/message'\r\nimport { STATUS_CODE } from '../const/config'\r\nimport moment from 'moment'\r\n\r\nfunction* watchfetchAllListOrders() {\r\n    while (true) {\r\n        yield take(types.FETCH_ALL_LIST_ORDER)\r\n        const res = yield call(fetchAllListOrders)\r\n        const { status, data } = res\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put(fetchAllListOrdersSuccess(data))\r\n        } else {\r\n            yield put(fetchAllListOrdersFailed(data))\r\n        }\r\n    }\r\n}\r\n\r\nfunction* watchfetchListOrdersById({ payload }) {\r\n    const { id } = payload\r\n    const res = yield call(fetchListOrdersById, id)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n        yield put(fetchListOrdersByIdSuccess(data))\r\n    } else {\r\n        yield put(fetchListOrdersByIdFailed(data))\r\n    }\r\n}\r\n\r\nfunction* watchFilterOrder({ payload }) {\r\n    // const { id } = payload\r\n    // const res = yield call(fetchListOrdersById, id)\r\n    // console.log(res)\r\n    // const { status, data } = res\r\n    // if (status === STATUS_CODE.SUCCESS) {\r\n    //     yield put(fetchListOrdersByIdSuccess(data))\r\n    // } else {\r\n    //     yield put(fetchListOrdersByIdFailed(data))\r\n    // }\r\n}\r\n\r\nfunction* watchCreateOrder({ payload }) {\r\n    var time = new Date()\r\n    const body = {\r\n        idAddress: payload.id,\r\n        listBooks: payload.data,\r\n        status: 1,\r\n        createAt: moment(time).unix(),\r\n        endTime: '-'\r\n    }\r\n    const res = yield call(createOrder, body)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.CREATED) {\r\n        yield put(createOrderSuccess(data))\r\n        toastSuccess(msg.MSG_CREATE_ORDER_SUCCESS)\r\n    }\r\n    else yield put(createOrderFailed(data))\r\n}\r\n\r\nfunction* watchUpdateOrder({ payload }) {\r\n    const res = yield call(updateOrder, payload.data)\r\n    const { status, data } = res\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n        toastSuccess(msg.MSG_UPDATE_ORDER_SUCCESS)\r\n        yield put(updateOrderSuccess(data))\r\n    }\r\n    else yield put(updateOrderFailed(data))\r\n}\r\n\r\nfunction* orderSaga() {\r\n    yield takeEvery(types.FETCH_LIST_ORDER_BY_ID, watchfetchListOrdersById)\r\n    yield fork(watchfetchAllListOrders)\r\n    yield takeEvery(types.CREATE_ORDER, watchCreateOrder)\r\n    yield takeLatest(types.FILTER_ORDER, watchFilterOrder)\r\n    yield takeLatest(types.UPDATE_ORDER, watchUpdateOrder)\r\n}\r\n\r\nexport default orderSaga","import { fork, all } from 'redux-saga/effects'\r\n\r\nimport bookSaga from './book'\r\nimport cartSaga from './cart'\r\nimport accountSaga from './account'\r\nimport orderSaga from './order'\r\n\r\n\r\nfunction* rootSaga() {\r\n    yield all([\r\n        yield fork(bookSaga),\r\n        yield fork(accountSaga),\r\n        yield fork(cartSaga),\r\n        yield fork(orderSaga)\r\n    ])\r\n}\r\n\r\nexport default rootSaga","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport rootReducer from '../reducers/index'\r\nimport thunk from 'redux-thunk'\r\nimport { createBrowserHistory } from 'history';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport rootSaga from '../sagas/index'\r\n\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        shouldHotReload: false\r\n      })\r\n    : compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nexport const history = createBrowserHistory();\r\n\r\nconst configureStore = () => {\r\n    const middleWares = [thunk, sagaMiddleware, routerMiddleware(history)]\r\n\r\n    const enhancers = [applyMiddleware(...middleWares)]\r\n\r\n    const store = createStore(\r\n        rootReducer(history),\r\n        composeEnhancers(...enhancers)\r\n    )\r\n    sagaMiddleware.run(rootSaga)\r\n    return store\r\n}\r\n\r\nexport default configureStore","export const MODAL_TITLE = 'Thêm mới sản phẩm'\r\n\r\nexport const LIMIT_FORMAT = 'Bạn chỉ được tải lên file dạng JPG/PNG!'\r\n\r\nexport const LIMIT_SIZE = 'Kích cỡ ảnh phải nhỏ hơn 2MB!'\r\n\r\nexport const UPLOAD_SUCCESS = 'Tải ảnh lên thành công!'\r\n\r\nexport const REQUIRE_NAME = 'Tên sách không được để trống!'\r\n\r\nexport const REQUIRE_AUTHOR = 'Tác giả không được để trống!'\r\n\r\nexport const REQUIRE_TOPIC = 'Chọn danh mục'\r\n\r\nexport const REQUIRE_IVENTORY = 'Hãy nhập số lượng sách trong kho!'\r\n\r\nexport const REQUIRE_PRICE = 'Hãy nhập giá tiền của sách!'\r\n\r\nexport const REQUIRE_DISCOUNT = 'Hãy nhập số % giảm giá!'\r\n\r\nexport const REQUIRE_SIZE = 'Hãy nhập khuôn khổ sách!'\r\n\r\nexport const REQUIRE_PAGES = 'Hãy nhập số trang!'\r\n\r\nexport const REQUIRE_WEIGHT = 'Hãy nhập trọng lượng sách!'\r\n\r\nexport const REQUIRE_DATE = 'Hãy chọn ngày phát hành!'\r\n\r\nexport const REQUIRE_ISBN = 'Hãy nhập mã ISBN!'\r\n\r\nexport const REQUIRE_IMAGE = 'Hãy tải lên ảnh bìa sách!'","import React, { Component } from 'react';\r\nimport { MDBModal, MDBModalBody, MDBModalHeader, MDBBtn, MDBIcon, MDBView, MDBMask } from 'mdbreact'\r\nimport { Upload, Icon, InputNumber, Select, Form, Input, Button, DatePicker } from 'antd'\r\nimport Lightbox from 'react-image-lightbox';\r\n\r\nimport * as cont from './const'\r\nimport './style.scss'\r\nclass ModalNewBook extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            previewVisible: false,\r\n            imageUrl: '',\r\n            changeToSave: true\r\n        }\r\n    }\r\n    beforeUpload = file => {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            this.$utils.toastError(cont.LIMIT_FORMAT);\r\n        }\r\n        const isLt2M = file.size / 1024 / 1024 < 2;\r\n        if (!isLt2M) {\r\n            this.$utils.toastError(cont.LIMIT_SIZE);\r\n        }\r\n        return isJpgOrPng && isLt2M;\r\n    }\r\n\r\n    changeImg = info => {\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n        if (info.file.status === 'done') {\r\n            // Get this url from response in real world.\r\n            this.$utils.getBase64(info.file.originFileObj, imageUrl =>\r\n                this.setState({\r\n                    imageUrl,\r\n                    loading: false,\r\n                    changeToSave: false\r\n                })\r\n            );\r\n            this.$utils.toastSuccess(cont.UPLOAD_SUCCESS)\r\n        }\r\n    };\r\n\r\n    handleSelectTopic = id => {\r\n        this.setState({\r\n            topic: id,\r\n            changeToSave: false\r\n        })\r\n    }\r\n\r\n    changeHandler = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            changeToSave: false\r\n        });\r\n    };\r\n\r\n    normFile = e => {\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        const { updateListBook, data, toggleModal, fetchListBook } = this.props\r\n        const { imageUrl } = this.state\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                const { name, author, topic, percentDiscount, realPrice, inventory, pages, size, publishDate, weight } = values\r\n                const body = {\r\n                    id: data.id,\r\n                    src: imageUrl,\r\n                    title: name,\r\n                    author: author,\r\n                    inventory: inventory,\r\n                    realPrice: realPrice,\r\n                    percentDiscount: percentDiscount,\r\n                    topic: topic\r\n                }\r\n                updateListBook(body)\r\n                toggleModal()\r\n            }\r\n        });\r\n    };\r\n    render() {\r\n        const { modal, toggleModal, fieldsBook, form } = this.props\r\n        const { imageUrl, previewVisible, loading } = this.state\r\n        const { getFieldDecorator } = form;\r\n        const uploadButton = (\r\n            <div>\r\n                <Icon type={loading ? 'loading' : 'plus'} />\r\n                <div className=\"ant-upload-text\">Thêm ảnh</div>\r\n            </div>\r\n        );\r\n        return (\r\n            <MDBModal className='modal-new' cascading isOpen={modal} size='lg'>\r\n                <MDBModalHeader\r\n                    tag=\"h5\"\r\n                    className=\" green accent-3\"\r\n                    toggle={toggleModal}\r\n                    titleClass=\"w-100\">\r\n                    <MDBIcon className='mr-2' icon=\"plus\" />\r\n                    {cont.MODAL_TITLE}\r\n                </MDBModalHeader>\r\n                <MDBModalBody >\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <div className='row'>\r\n                            <div className='col-3'>\r\n                                <div className='row'>\r\n                                    <div className='col-12'>\r\n                                        {\r\n                                            imageUrl !== '' &&\r\n                                            <React.Fragment>\r\n                                                <label>Xem trước</label>\r\n                                                <MDBView hover onClick={() => this.setState({ previewVisible: true })}>\r\n                                                    <img className='img-lightbox mb-2 img-fluid'\r\n                                                        src={imageUrl}\r\n                                                        alt='Gallery'\r\n                                                        waves=\"true\"\r\n                                                        overlay=\"true\" />\r\n                                                    <MDBMask className=\"flex-center\" overlay=\"white-light\" />\r\n                                                </MDBView>\r\n                                            </React.Fragment>\r\n                                        }\r\n                                        <Form.Item label='Thêm ảnh'>\r\n                                            {getFieldDecorator('fileList', {\r\n                                                valuePropName: 'fileList',\r\n                                                getValueFromEvent: this.normFile,\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_IMAGE\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <Upload\r\n                                                    accept=\"image/png, image/jpeg\"\r\n                                                    listType=\"picture-card\"\r\n                                                    className=\"avatar-uploader\"\r\n                                                    action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                                                    showUploadList={false}\r\n                                                    beforeUpload={this.beforeUpload}\r\n                                                    onPreview={this.handlePreview}\r\n                                                    onChange={this.changeImg}\r\n                                                >\r\n                                                    {imageUrl === '' ? uploadButton : <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} />}\r\n                                                </Upload>\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className='col-9'>\r\n                                <div className='row'>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Tên sách'>\r\n                                            {getFieldDecorator('name', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_NAME,\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <Input.TextArea\r\n                                                    autoSize={{ minRows: 2, maxRows: 6 }} />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Tác giả'>\r\n                                            {getFieldDecorator('author', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_AUTHOR,\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <Input size='large' />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Danh mục'>\r\n                                            {getFieldDecorator('topic', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_TOPIC\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <Select\r\n                                                    placeholder={cont.REQUIRE_TOPIC}\r\n                                                    style={{ width: '100%' }}\r\n                                                    size='large' >\r\n                                                    {\r\n\r\n                                                        fieldsBook.length > 0 &&\r\n                                                        fieldsBook.map((item, index) =>\r\n                                                            <Select.Option key={index} value={item.id}>\r\n                                                                {item.name}\r\n                                                            </Select.Option>)\r\n                                                    }\r\n                                                </Select>\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Khuôn khổ'>\r\n                                            {getFieldDecorator('size', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_SIZE,\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <Input size='large' />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Mã ISBN'>\r\n                                            {getFieldDecorator('isbn', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_ISBN,\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <Input size='large' />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Đơn giá'>\r\n                                            {getFieldDecorator('realPrice', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_PRICE\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <InputNumber\r\n                                                    min={0}\r\n                                                    style={{ width: '100%' }}\r\n                                                    step={1000}\r\n                                                    size='large'\r\n                                                    formatter={value => this.$utils.formatVND(value)}\r\n                                                    parser={value => this.$utils.formatVND(value)}\r\n                                                />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n\r\n                                    <div className='col-4'>\r\n                                        <Form.Item label='Tồn kho'>\r\n                                            {getFieldDecorator('inventory', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_IVENTORY\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <InputNumber\r\n                                                    min={0}\r\n                                                    style={{ width: '100%' }}\r\n                                                    size='large'\r\n                                                />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-4'>\r\n                                        <Form.Item label='Giảm giá (%)'>\r\n                                            {getFieldDecorator('percentDiscount', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_DISCOUNT\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <InputNumber\r\n                                                    min={0}\r\n                                                    style={{ width: '100%' }}\r\n                                                    size='large'\r\n                                                    step={0.1}\r\n                                                />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-4'>\r\n                                        <Form.Item label='Số trang'>\r\n                                            {getFieldDecorator('pages', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_PAGES\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <InputNumber\r\n                                                    min={1}\r\n                                                    style={{ width: '100%' }}\r\n                                                    size='large'\r\n                                                    step={1}\r\n                                                />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Trọng lượng(gram)'>\r\n                                            {getFieldDecorator('weight', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_WEIGHT\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <InputNumber\r\n                                                    min={1}\r\n                                                    style={{ width: '100%' }}\r\n                                                    size='large'\r\n                                                    step={1}\r\n                                                />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className='col-6'>\r\n                                        <Form.Item label='Ngày phát hành'>\r\n                                            {getFieldDecorator('publishDate', {\r\n                                                rules: [\r\n                                                    {\r\n                                                        type: 'object',\r\n                                                        required: true,\r\n                                                        message: cont.REQUIRE_DATE\r\n                                                    },\r\n                                                ],\r\n                                            })(\r\n                                                <DatePicker\r\n                                                    style={{ width: '100%' }}\r\n                                                    size='large'\r\n                                                    placeholder='Chọn ngày'\r\n                                                    format='DD-MM-YYYY' />\r\n                                            )}\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Form.Item className='text-center mt-3'>\r\n                            <MDBBtn className='rounded-pill' outline onClick={toggleModal}>Hủy</MDBBtn>\r\n                            <Button\r\n                                size='large'\r\n                                type='primary'\r\n                                className='text-white'\r\n                                shape=\"round\"\r\n                                htmlType=\"submit\">\r\n                                Lưu\r\n                                </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </MDBModalBody>\r\n                {previewVisible && (\r\n                    <Lightbox\r\n                        mainSrc={imageUrl}\r\n                        onCloseRequest={() => this.setState({ previewVisible: false })}\r\n                    />\r\n                )}\r\n            </MDBModal>\r\n        )\r\n    }\r\n}\r\n\r\nconst Wrapper = Form.create({ name: 'update_book' })(ModalNewBook)\r\nexport default Wrapper;","import React, { Component } from 'react';\r\n\r\nimport { MDBIcon, MDBBtn } from 'mdbreact'\r\n\r\nimport './style.scss'\r\nimport ModalNewBook from './ModalNewBook';\r\nclass NBBtn extends Component {\r\n    state = {\r\n        modal: false\r\n    }\r\n\r\n    toggleModal = () => {\r\n        this.setState({ modal: !this.state.modal })\r\n    }\r\n    render() {\r\n        const { modal } = this.state\r\n        const { fieldsBook } = this.props\r\n        return (\r\n            <div>\r\n                <div className='nbbtn-container' onClick={this.toggleModal}>\r\n                    <MDBBtn >\r\n                        <MDBIcon icon='plus-circle' size='2x' />\r\n                    </MDBBtn>\r\n                    <div>Thêm sách</div>\r\n                </div >\r\n                {\r\n                    modal &&\r\n                    <ModalNewBook modal={modal} toggleModal={this.toggleModal} fieldsBook={fieldsBook} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NBBtn;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport * as bookActions from '../../actions/book'\r\nimport NBBtn from '../../components/Buttons/NewBookBtn/NewBookBtn';\r\nclass NewBookContainer extends Component {\r\n    state = {  }\r\n    render() { \r\n        const { fieldsBook } = this.props\r\n        return (\r\n            <NBBtn fieldsBook={fieldsBook}/>\r\n        )\r\n    }\r\n}\r\n\r\nNewBookContainer.propTypes = {\r\n    fieldsBook: PropTypes.array,\r\n  }\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        fieldsBook: state.books.fieldsBook\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        bookActions: bindActionCreators(bookActions, dispatch)\r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBookContainer);","import React, { Component, lazy, Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom'\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'bootstrap/dist/js/bootstrap.min.js'\r\nimport 'jquery/dist/jquery.min.js'\r\n\r\nimport 'antd/dist/antd.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nimport { BackTop } from 'antd'\r\nimport NewBookContainer from './containers/BookContainer/NewBookContainer';\r\n\r\nimport * as utils from './utils/Utils'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport configureStore, { history } from './redux/configureStore'\r\n\r\n\r\nimport { ToastContainer } from 'react-toastify'\r\nimport Spinner from './components/Spinners/Spinner'\r\n\r\nimport './styles/index.scss'\r\n\r\nconst role = localStorage.getItem('role')\r\nconst Routes = lazy(() =>\r\n    new Promise((resolve, reject) =>\r\n        setTimeout(() => resolve(import(\"./routes/Routes\")), 3000)\r\n    ))\r\nglobal.$utils = utils\r\nComponent.prototype.$utils = global.$utils\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter basename='/'>\r\n            <BackTop visibilityHeight={100} />\r\n            {role === '2' && <NewBookContainer />}\r\n            <Spinner />\r\n            <ToastContainer />\r\n            <Suspense fallback={<Spinner showSpin={true} />}>\r\n                <Routes />\r\n            </Suspense>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);","//MODAL ACTIONS\r\nexport const OPEN_MODAL = 'OPEN_MODAL'\r\n\r\nexport const CLOSE_MODAL = 'CLOSE_MODAL'\r\n\r\n//BOOK ACTIONS\r\nexport const FETCH_LIST_BOOK = 'FETCH_LIST_BOOK'\r\n\r\nexport const FETCH_LIST_BOOK_SUCCESS = 'FETCH_LIST_BOOK_SUCCESS'\r\n\r\nexport const FETCH_LIST_BOOK_FAILED = 'FETCH_LIST_BOOK_FAILED'\r\n\r\nexport const FETCH_ALL_PRODUCTS = 'FETCH_ALL_PRODUCTS'\r\n\r\nexport const GET_DETAIL_BOOK = 'GET_DETAIL_BOOK'\r\n\r\nexport const GET_DETAIL_BOOK_SUCCESS = 'GET_DETAIL_BOOK_SUCCESS'\r\n\r\nexport const GET_DETAIL_BOOK_FAILED = 'GET_DETAIL_BOOK_FAILED'\r\n\r\nexport const UPDATE_BOOK = 'UPDATE_BOOK'\r\n\r\nexport const UPDATE_BOOK_SUCCESS = 'UPDATE_BOOK_SUCCESS'\r\n\r\nexport const UPDATE_BOOK_FAILED = 'UPDATE_BOOK_FAILED'\r\n\r\n\r\n//FIELDSBOOK ACTIONS\r\nexport const FETCH_LIST_FIELDSBOOK = 'FETCH_LIST_FIELDSBOOK'\r\n\r\nexport const FETCH_LIST_FIELDSBOOK_SUCCESS = 'FETCH_LIST_FIELDSBOOK_SUCCESS'\r\n\r\nexport const FETCH_LIST_FIELDSBOOK_FAILED = 'FETCH_LIST_FIELDSBOOK_FAILED'\r\n\r\n//CART ACTIONS\r\nexport const FETCH_CART = 'FETCH_CART'\r\n\r\nexport const FETCH_CART_SUCCESS = 'FETCH_CART_SUCCESS'\r\n\r\nexport const FETCH_CART_FAILED = 'FETCH_CART_FAILED'\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART'\r\n\r\nexport const ADD_TO_CART_SUCCESS = 'ADD_TO_CART_SUCCESS'\r\n\r\nexport const ADD_TO_CART_FAILED = 'ADD_TO_CART_FAILED'\r\n\r\nexport const REMOVE_ITEM_FROM_CART = 'REMOVE_ITEM_FROM_CART'\r\n\r\nexport const REMOVE_ITEM_FROM_CART_SUCCESS = 'REMOVE_ITEM_FROM_CART_SUCCESS'\r\n\r\nexport const REMOVE_ITEM_FROM_CART_FAILED = 'REMOVE_ITEM_FROM_CART_FAILED'\r\n\r\nexport const UPDATE_CART = 'UPDATE_CART'\r\n\r\nexport const UPDATE_CART_SUCCESS = 'UPDATE_CART_SUCCESS'\r\n\r\nexport const UPDATE_CART_FAILED = 'UPDATE_CART_FAILED'\r\n\r\n//MESSAGE ACTIONS\r\nexport const CHANGE_MESSAGE  = 'CHANGE_MESSAGE ' \r\n\r\n//SPINNER ACTIONS\r\nexport const SHOW_LOADING = 'SHOW_LOADING'\r\n\r\nexport const HIDE_LOADING = 'HIDE_LOADING'\r\n\r\n//FILTER BOOK ACTIONS\r\nexport const FILTER_BOOKS_SINGLE = 'FILTER_BOOKS_SINGLE'\r\n\r\nexport const FITLER_BOOKS_SINGLE_SUCCESS = 'FITLER_BOOKS_SINGLE_SUCCESS'\r\n\r\nexport const FITLER_BOOKS_SINGLE_FAILED = 'FITLER_BOOKS_SINGLE_FAILED'\r\n\r\nexport const FILTER_BOOKS_MULTI = 'FILTER_BOOKS_MULTI'\r\n\r\nexport const FITLER_BOOKS_MULTI_SUCCESS = 'FITLER_BOOKS_MULTI_SUCCESS'\r\n\r\nexport const FITLER_BOOKS_MULTI_FAILED = 'FITLER_BOOKS_MULTI_FAILED'\r\n\r\nexport const GET_KEYWORD = 'GET_KEYWORD'\r\n\r\n//ADDRESS ACTIONS\r\nexport const GET_LIST_ADDRESS = 'GET_LIST_ADDRESS'\r\n\r\nexport const GET_LIST_ADDRESS_SUCCESS = 'GET_LIST_ADDRESS_SUCCESS'\r\n\r\nexport const GET_LIST_ADDRESS_FAILED = 'GET_LIST_ADDRESS_FAILED'\r\n\r\nexport const CREATE_NEW_ADDRESS = 'CREATE_NEW_ADDRESS'\r\n\r\nexport const CREATE_NEW_ADDRESS_SUCCESS = 'CREATE_NEW_ADDRESS_SUCCESS'\r\n\r\nexport const CREATE_NEW_ADDRESS_FAILED = 'CREATE_NEW_ADDRESS_FAILED'\r\n\r\nexport const UPDATE_ADDRESS = 'UPDATE_ADDRESS'\r\n\r\nexport const UPDATE_ADDRESS_SUCCESS = 'UPDATE_ADDRESS_SUCCESS'\r\n\r\nexport const UPDATE_ADDRESS_FAILED = 'UPDATE_ADDRESS_FAILED'\r\n\r\nexport const DELETE_ADDRESS = 'DELETE_ADDRESS'\r\n\r\nexport const DELETE_ADDRESS_SUCCESS = 'DELETE_ADDRESS_SUCCESS'\r\n\r\nexport const DELETE_ADDRESS_FAILED = 'DELETE_ADDRESS_FAILED'\r\n\r\n//ORDER ACTIONS\r\n\r\nexport const FETCH_ALL_LIST_ORDER = 'FETCH_ALL_LIST_ORDER'\r\n\r\nexport const FETCH_ALL_LIST_ORDER_SUCCESS = 'FETCH_ALL_LIST_ORDER_SUCCESS'\r\n\r\nexport const FETCH_ALL_LIST_ORDER_FAILED = 'FETCH_ALL_LIST_ORDER_FAILED'\r\n\r\nexport const FETCH_LIST_ORDER_BY_ID = 'FETCH_LIST_ORDER_BY_ID'\r\n\r\nexport const FETCH_LIST_ORDER_BY_ID_SUCCESS = 'FETCH_LIST_ORDER_BY_ID_SUCCESS'\r\n\r\nexport const FETCH_LIST_ORDER_BY_ID_FAILED = 'FETCH_ALL_LIST_ORDER_FAILED'\r\n\r\nexport const FILTER_ORDER = 'FILTER_ORDER'\r\n\r\nexport const FILTER_ORDER_SUCCESS = 'FILTER_ORDER_SUCCESS'\r\n\r\nexport const FILTER_ORDER_FAILED = 'FILTER_ORDER_FAILED'\r\n\r\nexport const UPDATE_ORDER = 'UPDATE_ORDER'\r\n\r\nexport const UPDATE_ORDER_SUCCESS = 'UPDATE_ORDER_SUCCESS'\r\n\r\nexport const UPDATE_ORDER_FAILED = 'UPDATE_ORDER_FAILED'\r\n\r\nexport const CREATE_ORDER = 'CREATE_ORDER'\r\n\r\nexport const CREATE_ORDER_SUCCESS = 'CREATE_ORDER_SUCCESS'\r\n\r\nexport const CREATE_ORDER_FAILED = 'CREATE_ORDER_FAILED'\r\n\r\n//COMMENT ACTIONS\r\nexport const GET_LIST_COMMENTS = 'GET_LIST_COMMENTS'\r\n\r\nexport const GET_LIST_COMMENTS_SUCCESS = 'GET_LIST_COMMENTS_SUCCESS'\r\n\r\nexport const GET_LIST_COMMENTS_FAILED = 'GET_LIST_COMMENTS_FAILED'\r\n\r\nexport const ADD_COMMENT = 'ADD_COMMENT'\r\n\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'\r\n\r\nexport const ADD_COMMENT_FAILED = 'ADD_COMMENT_FAILED'","//TITLE\r\nexport const TITLE_SUCCESS = \"Thành công!\"\r\n\r\nexport const TITLE_FAIL = \"Thất bại!\"\r\n\r\nexport const MSG_SURE_TO_DELETE_ADDRESS = 'Bạn có chắc muốn xóa địa chỉ này?'\r\n\r\nexport const MSG_SURE_TO_ORDER = 'Bạn có chắc muốn đặt mua?'\r\n\r\n//SUCCESS\r\nexport const MSG_ADD_TO_CART_SUCCESS = 'Sản phẩm đã được thêm vào giỏ hàng thành công !'\r\n\r\nexport const MSG_UPDATE_CART_SUCESS = 'Cập nhật giỏ hàng thành công!'\r\n\r\nexport const MSG_DELETE_BOOK_IN_CART_SUCCESS = 'Xóa sản phẩm thành công!'\r\n\r\nexport const MSG_CREATED_ADDRESS_SUCCESS = 'Thêm địa chỉ thành công!'\r\n\r\nexport const MSG_UPDATE_ADDRESS_SUCCESS = 'Cập nhật địa chỉ thành công!'\r\n\r\nexport const MSG_DELETE_ADDRESS_SUCCESS = 'Xóa địa chỉ thành công!'\r\n\r\nexport const MSG_CREATE_ORDER_SUCCESS = 'Đặt mua hàng thành công!'\r\n\r\nexport const MSG_UPDATE_ORDER_SUCCESS = 'Cập nhật đơn hàng thành công!'\r\n\r\nexport const MSG_UPDATE_BOOK_SUCCESS = 'Cập nhật sản phẩm thành công!'\r\n\r\nexport const MSG_ADD_COMMENT_SUCCESS = 'Thêm bình luận thành công!'\r\n\r\n//CONTENT\r\nexport const MSG_MAX_QUANTITY = 'Rất xin lỗi. Chúng tôi chỉ có tối đa '\r\n\r\nexport const MSG_OUT_OF_STOCK = \"Sản phẩm này đã hết hàng. Bạn vui lòng đợi 1 vài ngày nữa và tiếp tục mua hàng. Xin cảm ơn!\"\r\n\r\nexport const MSG_CART_EMPTY = 'Chưa có sản phẩm nào trong giỏ hàng !'\r\n\r\nexport const MSG_COMEBACK = 'Chào mừng bạn quay trở lại Bookeven!'\r\n\r\nexport const MSG_EMPTY_ADDRESS = 'Không có địa chỉ nào được lưu!'\r\n\r\nexport const MSG_ADD_TO_CART_FAIL = 'Bạn đã thêm tối đa số hàng có trong kho!'\r\n","import * as types from '../const/actionType'\r\n\r\nexport const getDetailBook = data => {\r\n    return {\r\n        type: types.GET_DETAIL_BOOK,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDetailBookSuccess = data => {\r\n    return {\r\n        type: types.GET_DETAIL_BOOK_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDetailBookFailed = error => {\r\n    return {\r\n        type: types.GET_DETAIL_BOOK_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListBook = () => {\r\n    return {\r\n        type: types.FETCH_LIST_BOOK\r\n    }\r\n}\r\n\r\nexport const fetchListBookSuccess = data => {\r\n    return {\r\n        type: types.FETCH_LIST_BOOK_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListBookFailed = error => {\r\n    return {\r\n        type: types.FETCH_LIST_BOOK_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const filterBooksSingle = data => {\r\n    return {\r\n        type: types.FILTER_BOOKS_SINGLE,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const filterBooksSingleSuccess = data => {\r\n    return {\r\n        type: types.FITLER_BOOKS_SINGLE_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const filterBooksMulti = data => {\r\n    return {\r\n        type: types.FILTER_BOOKS_MULTI,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const filterBooksMultiSuccess = data => {\r\n    return {\r\n        type: types.FITLER_BOOKS_MULTI_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const getKeyword = keyword => {\r\n    return {\r\n        type: types.GET_KEYWORD,\r\n        payload: {\r\n            keyword\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListFieldsbook = () => {\r\n    return {\r\n        type: types.FETCH_LIST_FIELDSBOOK\r\n    }\r\n}\r\n\r\nexport const fetchListFieldsbookSuccess = data => {\r\n    return {\r\n        type: types.FETCH_LIST_FIELDSBOOK_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListFieldsbookFailed = error => {\r\n    return {\r\n        type: types.FETCH_LIST_FIELDSBOOK_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateListBook = data => {\r\n    return {\r\n        type: types.UPDATE_BOOK,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateListBookSuccess = data => {\r\n    return {\r\n        type: types.UPDATE_BOOK_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateListBookFailed = error => {\r\n    return {\r\n        type: types.UPDATE_BOOK_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const getListComments = ISBN => {\r\n    return {\r\n        type: types.GET_LIST_COMMENTS,\r\n        payload: {\r\n            ISBN\r\n        }\r\n    }\r\n}\r\n\r\nexport const getListCommentsSuccess = data => {\r\n    return {\r\n        type: types.GET_LIST_COMMENTS_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const getListCommentsFailed = error => {\r\n    return {\r\n        type: types.GET_LIST_COMMENTS_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const addComment = data => {\r\n    return {\r\n        type: types.ADD_COMMENT,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const addCommentSuccess = data => {\r\n    return {\r\n        type: types.ADD_COMMENT_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const addCommentFailed = error => {\r\n    return {\r\n        type: types.ADD_COMMENT_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}","import { notification } from 'antd'\r\nimport * as msg from '../const/message'\r\nimport { toast } from 'react-toastify'\r\nimport province from './data/province.json'\r\nimport district from './data/district.json'\r\nimport ward from './data/ward.json'\r\nimport moment from 'moment'\r\n\r\nexport const formatVND = value => {\r\n  var numeral = require('numeral')\r\n  return numeral(value).format('0,0') + ' đ'\r\n}\r\n\r\nexport const addToCartSuccess = () => {\r\n  const key = 'updatable';\r\n  notification.success({\r\n    key: key,\r\n    message: msg.TITLE_SUCCESS,\r\n    description: msg.MSG_ADD_TO_CART_SUCCESS,\r\n  });\r\n  setTimeout(() => {\r\n    notification.success({\r\n      key: key,\r\n      message: msg.TITLE_SUCCESS,\r\n      description: msg.MSG_ADD_TO_CART_SUCCESS,\r\n    });\r\n  }, 1000);\r\n}\r\n\r\nexport const addToCartFail = () => {\r\n  const key = 'updatable';\r\n  notification.error({\r\n    key: key,\r\n    message: msg.TITLE_FAIL,\r\n    description: msg.MSG_ADD_TO_CART_FAIL,\r\n  });\r\n  setTimeout(() => {\r\n    notification.error({\r\n      key: key,\r\n      essage: msg.TITLE_FAIL,\r\n      description: msg.MSG_ADD_TO_CART_FAIL,\r\n    });\r\n  }, 1000);\r\n}\r\n\r\nexport const idGenerator = function () {\r\n  return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const toastSuccess = message => {\r\n  toast.success(message)\r\n}\r\n\r\nexport const toastError = message => {\r\n  toast.error(message)\r\n}\r\n\r\nexport const toastErrorApi = error => {\r\n  let message = null\r\n  if (typeof error === 'object' && error.message)\r\n    message = error.message\r\n  if (message !== null && typeof message !== 'undefined' && message !== '') {\r\n    toast.error(message)\r\n  }\r\n}\r\n\r\nexport function convertVietnamese(str) {\r\n  str = str.toLowerCase();\r\n  str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, \"a\");\r\n  str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, \"e\");\r\n  str = str.replace(/ì|í|ị|ỉ|ĩ/g, \"i\");\r\n  str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, \"o\");\r\n  str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, \"u\");\r\n  str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, \"y\");\r\n  str = str.replace(/đ/g, \"d\");\r\n  // eslint-disable-next-line no-useless-escape\r\n  str = str.replace(/!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'| |\\\"|\\&|\\#|\\[|\\]|~|$|_/g, \"-\");\r\n  str = str.replace(/-+-/g, \"-\");\r\n  // eslint-disable-next-line no-useless-escape\r\n  str = str.replace(/^\\-+|\\-+$/g, \"\");\r\n\r\n  return str;\r\n}\r\n\r\nexport const calculateTotalCart = (cart, type) => {\r\n  var result = 0\r\n  if (cart.length > 0)\r\n    cart.map(item =>\r\n      result += (parseInt(item.quantity) * parseInt(item.realPrice - (item.realPrice * item.percentDiscount / 100))))\r\n  if (type === 'vnd')\r\n    result = formatVND(result)\r\n  return result\r\n}\r\n\r\nexport const filterAddress = (provinceId, districtId, wardId) => {\r\n  var address = ''\r\n  const wardName = ward.filter(item => item.wardid === wardId)[0]\r\n  const districtName = district.filter(item => item.districtid === districtId)[0]\r\n  const provinceName = province.filter(item => item.provinceid === provinceId)[0]\r\n  address = `${wardName.name}, ${districtName.name}, ${provinceName.name}`\r\n  return address\r\n}\r\n\r\n\r\nexport const getBase64 = (img, callback) => {\r\n  const reader = new FileReader();\r\n  reader.addEventListener('load', () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nexport const calDiscountPrice = (realPrice, percent) => {\r\n  return formatVND(realPrice - (realPrice * percent / 100))\r\n}\r\n\r\nexport const calTotalPrice = (realPrice, percent, quantity) => {\r\n  return formatVND((realPrice - (realPrice * percent / 100)) * quantity)\r\n}\r\n\r\n\r\nexport const formatTimeToDate = (timestamp, format) => {\r\n  if (typeof timestamp !== 'number')\r\n    return timestamp\r\n  else\r\n  return moment.unix(timestamp).format(format)\r\n}","import * as types from '../const/actionType'\r\n\r\nexport const fetchCart = () => {\r\n    return {\r\n        type: types.FETCH_CART,\r\n    }\r\n}\r\n\r\nexport const fetchCartSuccess = data => {\r\n    return {\r\n        type: types.FETCH_CART_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchCartFailed = error => {\r\n    return {\r\n        type: types.FETCH_CART_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const addToCart = (product, quantity) => {\r\n    return {\r\n        type: types.ADD_TO_CART,\r\n        payload: {\r\n            product,\r\n            quantity\r\n        }\r\n    }\r\n}\r\n\r\nexport const addToCartSuccess = data => {\r\n    return {\r\n        type: types.ADD_TO_CART_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const addToCartFailed = error => {\r\n    return {\r\n        type: types.ADD_TO_CART_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateCart = (product, quantity) => {\r\n    return {\r\n        type: types.UPDATE_CART,\r\n        payload: {\r\n            product,\r\n            quantity\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateCartSuccess = data => {\r\n    return {\r\n        type: types.UPDATE_CART_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateCartFailed = error => {\r\n    return {\r\n        type: types.UPDATE_CART_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeCart = product => {\r\n    return {\r\n        type: types.REMOVE_ITEM_FROM_CART,\r\n        payload: {\r\n            product\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeCartSuccess = data => {\r\n    return {\r\n        type: types.REMOVE_ITEM_FROM_CART_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeCartFailed = error => {\r\n    return {\r\n        type: types.REMOVE_ITEM_FROM_CART_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n","    import * as types from '../const/actionType'\r\n\r\nexport const getListAddress = () => {\r\n    return {\r\n        type: types.GET_LIST_ADDRESS\r\n    }\r\n}\r\n\r\nexport const getListAddressSuccess = data => {\r\n    return {\r\n        type: types.GET_LIST_ADDRESS_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const getListAddressFailed = error => {\r\n    return {\r\n        type: types.GET_LIST_ADDRESS_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewAddress = data => {\r\n    return {\r\n        type: types.CREATE_NEW_ADDRESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewAddressSuccess = data => {\r\n    return {\r\n        type: types.CREATE_NEW_ADDRESS_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewAddressFailed = error => {\r\n    return {\r\n        type: types.CREATE_NEW_ADDRESS_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateAddress = data => {\r\n    return {\r\n        type: types.UPDATE_ADDRESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateAddressSuccess = data => {\r\n    return {\r\n        type: types.UPDATE_ADDRESS_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateAddressFailed = error => {\r\n    return {\r\n        type: types.UPDATE_ADDRESS_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteAddress = id => {\r\n    return {\r\n        type: types.DELETE_ADDRESS,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteAddressSuccess = id => {\r\n    return {\r\n        type: types.DELETE_ADDRESS_SUCCESS,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteAddressFailed = error => {\r\n    return {\r\n        type: types.DELETE_ADDRESS_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}","import * as types from '../const/actionType'\r\n\r\nexport const fetchAllListOrders = () => {\r\n    return {\r\n        type: types.FETCH_ALL_LIST_ORDER,\r\n    }\r\n}\r\n\r\nexport const fetchAllListOrdersSuccess = data => {\r\n    return {\r\n        type: types.FETCH_ALL_LIST_ORDER_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllListOrdersFailed = error => {\r\n    return {\r\n        type: types.FETCH_ALL_LIST_ORDER_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListOrdersById = id => {\r\n    return {\r\n        type: types.FETCH_LIST_ORDER_BY_ID,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListOrdersByIdSuccess = data => {\r\n    return {\r\n        type: types.FETCH_LIST_ORDER_BY_ID_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchListOrdersByIdFailed = error => {\r\n    return {\r\n        type: types.FETCH_LIST_ORDER_BY_ID_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateOrder =  data => {\r\n    return {\r\n        type: types.UPDATE_ORDER,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateOrderSuccess = data => {\r\n    return {\r\n        type: types.UPDATE_ORDER_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateOrderFailed = error => {\r\n    return {\r\n        type: types.UPDATE_ORDER_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const createOrder = (id, data) => {\r\n    return {\r\n        type: types.CREATE_ORDER,\r\n        payload: {\r\n            id,\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const createOrderSuccess = data => {\r\n    return {\r\n        type: types.CREATE_ORDER_SUCCESS,\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport const createOrderFailed = error => {\r\n    return {\r\n        type: types.CREATE_ORDER_FAILED,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}"],"sourceRoot":""}